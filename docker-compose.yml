services:
  user-service:
    depends_on:
      - init-kafka
    build:
      context: .
      args:
        JAR_PATH: user-service/target
    ports:
      - "8080:8080"
  package-service:
    depends_on:
      - init-kafka
    build:
      context: .
      args:
        JAR_PATH: package-service/target
    ports:
      - "8081:8080"

  kafka:
    image: &kafka-image bitnami/kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server=localhost:9092", "--list"]
      start_period: 15s
      interval: 10s

  init-kafka:
    image: *kafka-image
    working_dir: /opt/bitnami/kafka/bin
    entrypoint:
      - /bin/bash
      - -c
      - "
        kafka-topics.sh --create --if-not-exists --topic accepted --replication-factor=1 --partitions=1 --bootstrap-server kafka:9092
        && kafka-topics.sh --create --if-not-exists --topic validated --replication-factor=1 --partitions=1 --bootstrap-server kafka:9092
        && kafka-topics.sh --create --if-not-exists --topic declined --replication-factor=1 --partitions=1 --bootstrap-server kafka:9092
        && kafka-topics.sh --create --if-not-exists --topic sent --replication-factor=1 --partitions=1 --bootstrap-server kafka:9092
        "
    depends_on:
      kafka:
        condition: service_healthy
